#!/usr/bin/env node
// shebang line, read more on this

/**
 * Module dependencies.
 */

const app     = require('../app');
// app is a huge object with many useful functions and other information about the app object
// console.log(app, '-=-=-=-=-=-=-=-=-=-=')
const debug   = require('debug')('express-server:server');
const http    = require('http');
const PORT    = process.env.PORT || 5000  // Use process.env.PORT variable if available if not use 5000    
// console.log(http, '-=-=-=-=-=-=-=-=-=-=')            
const server  = http.createServer(app);   // Create HTTP server, this is a huge object with many functions and othe


server.listen(PORT);
server.on('error', onError);
/**
 * Event listener for HTTP server "listening" event.
 */
server.on('listening', () => {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  console.log('listening function', typeof server, addr, bind)
  debug('Listening on ' + bind);
});

/**
 * Event listener for HTTP server "error" event.
 * This runs when the server attempts to start
 */

function onError(error) {
  console.log(error, error.code)
  console.log("error-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}